name: InkoMoko CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, development ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  GO_VERSION: '1.24'
  TERRAFORM_VERSION: '1.12.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Code Quality & Testing
  # ============================================================================
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Dependencies
        run: go mod download

      - name: Go Format Check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted. Run 'gofmt -w .'"
            gofmt -s -l .
            exit 1
          fi
          echo "Go code is properly formatted"

      - name: Go Vet
        run: go vet ./...

      - name: Go Tests
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests

      - name: Install GoSec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Go Security Scan
        run: |
          gosec -fmt sarif -out gosec.sarif -severity medium -confidence medium ./... || echo "GoSec scan completed with findings"

      - name: Upload GoSec SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec.sarif
          category: gosec

  # ============================================================================
  # Infrastructure Validation
  # ============================================================================
  infrastructure:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd depoyment/terraform
          terraform fmt -check=true -diff=true -recursive

      - name: Terraform Validation
        run: |
          # Validate backend
          cd depoyment/terraform/backend
          terraform init -backend=false
          terraform validate

          # Validate modules - use absolute paths
          cd $GITHUB_WORKSPACE/depoyment/terraform/modules/networking
          terraform init -backend=false
          terraform validate

          cd $GITHUB_WORKSPACE/depoyment/terraform/modules/alb
          terraform init -backend=false
          terraform validate

          cd $GITHUB_WORKSPACE/depoyment/terraform/modules/compute
          terraform init -backend=false
          terraform validate

          # Validate environments
          cd $GITHUB_WORKSPACE/depoyment/terraform/environments/dev
          terraform init -backend=false
          terraform validate

      - name: Infrastructure Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: depoyment/terraform/
          framework: terraform
          quiet: true
          soft_fail: true
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif
          category: checkov-infrastructure

  # ============================================================================
  # Build & Package
  # ============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build Binary
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-w -s -extldflags '-static' -X main.version=${{ github.sha }}" \
            -o bin/inkomoko ./cmd/api

      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: inkomoko-binary
          path: bin/inkomoko
          retention-days: 7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}},enable={{is_default_branch}}
            type=sha,prefix=pr-,enable=${{ github.event_name == 'pull_request' }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # ============================================================================
  # Security & Compliance
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-filesystem

  # ============================================================================
  # Cleanup
  # ============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build, security]
    if: always()
    steps:
      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: inkomoko-binary
          failOnError: false
